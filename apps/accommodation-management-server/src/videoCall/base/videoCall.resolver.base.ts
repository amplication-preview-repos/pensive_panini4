/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { VideoCall } from "./VideoCall";
import { VideoCallCountArgs } from "./VideoCallCountArgs";
import { VideoCallFindManyArgs } from "./VideoCallFindManyArgs";
import { VideoCallFindUniqueArgs } from "./VideoCallFindUniqueArgs";
import { CreateVideoCallArgs } from "./CreateVideoCallArgs";
import { UpdateVideoCallArgs } from "./UpdateVideoCallArgs";
import { DeleteVideoCallArgs } from "./DeleteVideoCallArgs";
import { VideoCallService } from "../videoCall.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => VideoCall)
export class VideoCallResolverBase {
  constructor(
    protected readonly service: VideoCallService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "VideoCall",
    action: "read",
    possession: "any",
  })
  async _videoCallsMeta(
    @graphql.Args() args: VideoCallCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [VideoCall])
  @nestAccessControl.UseRoles({
    resource: "VideoCall",
    action: "read",
    possession: "any",
  })
  async videoCalls(
    @graphql.Args() args: VideoCallFindManyArgs
  ): Promise<VideoCall[]> {
    return this.service.videoCalls(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => VideoCall, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "VideoCall",
    action: "read",
    possession: "own",
  })
  async videoCall(
    @graphql.Args() args: VideoCallFindUniqueArgs
  ): Promise<VideoCall | null> {
    const result = await this.service.videoCall(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => VideoCall)
  @nestAccessControl.UseRoles({
    resource: "VideoCall",
    action: "create",
    possession: "any",
  })
  async createVideoCall(
    @graphql.Args() args: CreateVideoCallArgs
  ): Promise<VideoCall> {
    return await this.service.createVideoCall({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => VideoCall)
  @nestAccessControl.UseRoles({
    resource: "VideoCall",
    action: "update",
    possession: "any",
  })
  async updateVideoCall(
    @graphql.Args() args: UpdateVideoCallArgs
  ): Promise<VideoCall | null> {
    try {
      return await this.service.updateVideoCall({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => VideoCall)
  @nestAccessControl.UseRoles({
    resource: "VideoCall",
    action: "delete",
    possession: "any",
  })
  async deleteVideoCall(
    @graphql.Args() args: DeleteVideoCallArgs
  ): Promise<VideoCall | null> {
    try {
      return await this.service.deleteVideoCall(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
