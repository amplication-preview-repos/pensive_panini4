/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AccommodationProvider } from "./AccommodationProvider";
import { AccommodationProviderCountArgs } from "./AccommodationProviderCountArgs";
import { AccommodationProviderFindManyArgs } from "./AccommodationProviderFindManyArgs";
import { AccommodationProviderFindUniqueArgs } from "./AccommodationProviderFindUniqueArgs";
import { CreateAccommodationProviderArgs } from "./CreateAccommodationProviderArgs";
import { UpdateAccommodationProviderArgs } from "./UpdateAccommodationProviderArgs";
import { DeleteAccommodationProviderArgs } from "./DeleteAccommodationProviderArgs";
import { AccommodationProviderService } from "../accommodationProvider.service";
@graphql.Resolver(() => AccommodationProvider)
export class AccommodationProviderResolverBase {
  constructor(protected readonly service: AccommodationProviderService) {}

  async _accommodationProvidersMeta(
    @graphql.Args() args: AccommodationProviderCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AccommodationProvider])
  async accommodationProviders(
    @graphql.Args() args: AccommodationProviderFindManyArgs
  ): Promise<AccommodationProvider[]> {
    return this.service.accommodationProviders(args);
  }

  @graphql.Query(() => AccommodationProvider, { nullable: true })
  async accommodationProvider(
    @graphql.Args() args: AccommodationProviderFindUniqueArgs
  ): Promise<AccommodationProvider | null> {
    const result = await this.service.accommodationProvider(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AccommodationProvider)
  async createAccommodationProvider(
    @graphql.Args() args: CreateAccommodationProviderArgs
  ): Promise<AccommodationProvider> {
    return await this.service.createAccommodationProvider({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => AccommodationProvider)
  async updateAccommodationProvider(
    @graphql.Args() args: UpdateAccommodationProviderArgs
  ): Promise<AccommodationProvider | null> {
    try {
      return await this.service.updateAccommodationProvider({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AccommodationProvider)
  async deleteAccommodationProvider(
    @graphql.Args() args: DeleteAccommodationProviderArgs
  ): Promise<AccommodationProvider | null> {
    try {
      return await this.service.deleteAccommodationProvider(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
