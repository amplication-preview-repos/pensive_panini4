/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  University as PrismaUniversity,
  Student as PrismaStudent,
} from "@prisma/client";

export class UniversityServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UniversityCountArgs, "select">
  ): Promise<number> {
    return this.prisma.university.count(args);
  }

  async universities(
    args: Prisma.UniversityFindManyArgs
  ): Promise<PrismaUniversity[]> {
    return this.prisma.university.findMany(args);
  }
  async university(
    args: Prisma.UniversityFindUniqueArgs
  ): Promise<PrismaUniversity | null> {
    return this.prisma.university.findUnique(args);
  }
  async createUniversity(
    args: Prisma.UniversityCreateArgs
  ): Promise<PrismaUniversity> {
    return this.prisma.university.create(args);
  }
  async updateUniversity(
    args: Prisma.UniversityUpdateArgs
  ): Promise<PrismaUniversity> {
    return this.prisma.university.update(args);
  }
  async deleteUniversity(
    args: Prisma.UniversityDeleteArgs
  ): Promise<PrismaUniversity> {
    return this.prisma.university.delete(args);
  }

  async findStudents(
    parentId: string,
    args: Prisma.StudentFindManyArgs
  ): Promise<PrismaStudent[]> {
    return this.prisma.university
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .students(args);
  }
}
