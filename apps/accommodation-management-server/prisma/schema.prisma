datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Room {
  id           String             @id @default(cuid())
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  name         String?
  typeField    EnumRoomTypeField?
  price        Float?
  property     Property?          @relation(fields: [propertyId], references: [id])
  propertyId   String?
  appointments Appointment[]
}

model Property {
  id                    String                           @id @default(cuid())
  createdAt             DateTime                         @default(now())
  updatedAt             DateTime                         @updatedAt
  address               String?
  description           String?
  name                  String?
  provider              String?
  rooms                 Room[]
  reviews               Review[]
  propertyPictures      Json?
  roomPictures          Json?
  accommodationStatus   EnumPropertyAccommodationStatus?
  roomType              EnumPropertyRoomType?
  accommodationProvider String?
  location              String?
  waterIncluded         Boolean?
  electricityIncluded   Boolean?
  wifiAmount            Float?
  wifiIncluded          Boolean?
}

model Review {
  id         String    @id @default(cuid())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  comment    String?
  rating     Int?
  student    String?
  property   Property? @relation(fields: [propertyId], references: [id])
  propertyId String?
}

model Appointment {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  date      DateTime?
  student   String?
  room      Room?     @relation(fields: [roomId], references: [id])
  roomId    String?
}

model Document {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String?
  description String?
  file        Json?
  student     String?
}

model User {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  firstName String?
  lastName  String?
  username  String    @unique
  email     String?   @unique
  password  String
  roles     Json
  profiles  Profile[]
}

model Profile {
  id                String                        @id @default(cuid())
  createdAt         DateTime                      @default(now())
  updatedAt         DateTime                      @updatedAt
  username          String?
  bio               String?
  profilePicture    Json?
  user              User?                         @relation(fields: [userId], references: [id])
  userId            String?
  surname           String?
  age               Int?
  requestedRoomType EnumProfileRequestedRoomType?
  name              String?
  institution       String?
}

model Comment {
  id                 String   @id @default(cuid())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  content            String?
  author             String?
  post               Post?    @relation(fields: [postId], references: [id])
  postId             String?
  isActive           Boolean?
  accommodation      String?
  student            String?
  stayDurationMonths Int?
}

model Post {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  title     String?
  content   String?
  images    Json?
  author    String?
  comments  Comment[]
}

model VideoCall {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  callEnd   DateTime?
  callStart DateTime?
}

model Chat {
  id                     String    @id @default(cuid())
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  messages               String?
  chatCreatedAt          DateTime?
  chatCreatedAtTimestamp DateTime?
  chatMessages           String?
}

enum EnumRoomTypeField {
  Option1
}

enum EnumPropertyAccommodationStatus {
  Option1
}

enum EnumPropertyRoomType {
  Option1
}

enum EnumProfileRequestedRoomType {
  Option1
}
